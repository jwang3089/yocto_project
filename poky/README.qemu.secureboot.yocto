ssh-keygen -t rsa -b 4096 -C "jwang4024@yahoo.com"
 https://github.com/settings/tokens/new 
TOKEN: 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



##### S:ERROR
 bitbake core-image-minimal
ERROR: Variable IMAGE_INSTALL_append file: /home/jack/temp/poky/build/conf/local.conf line: 289 contains an operation using the old override syntax. Please convert this layer/metadata before attempting to use with a newer bitbake.
ERROR: Unable to parse /home/jack/temp/poky/bitbake/lib/bb/__init__.py
Traceback (most recent call last):
  File "/home/jack/temp/poky/bitbake/lib/bb/__init__.py", line 185, in fatal:
         mainlogger.critical(''.join(args), extra=kwargs)
    >    raise BBHandledException()
     
bb.BBHandledException


SOLUTION:

"XXXXX_append = " replace with "XXXXX +="

#### E:ERROR


#### E:ERROR
jack@jack-Precision-5560:~/temp/poky/build$ bitbake core-image-minimal
WARNING: You have included the meta-security layer, but 'security' has not been enabled in your DISTRO_FEATURES. Some bbappend files and preferred version setting may not take effect. See the meta-security README for details on enabling security support.
Loading cache: 100% |#######################################################################################################################################################################| Time: 0:00:00
Loaded 4062 entries from dependency cache.
ERROR: Invalid line '' in sstate manifest '/home/jack/temp/poky/build/tmp/sstate-control/index-qemux86_64'

Summary: There was 1 WARNING message.
Summary: There was 1 ERROR message, returning a non-zero exit code.


SOLUTION
rm -rf tmp

#### E:ERROR


git config --global user.name "Jack Wang"


######## Download and build for ISO image

git clone git://git.yoctoproject.org/poky.git
cd poky
git checkout -b kirkstone origin/kirkstone


source oe-init-build-env


MACHINE ?= "qemux86-64"

sudo apt install zstd

sudo apt-get install expect



######## openembedded
git clone git://git.openembedded.org/meta-openembedded
cd meta-openembedded
git checkout  kirkstone
cd build
bitbake-layers add-layer ../meta-openembedded/meta-oe
bitbake-layers add-layer ../meta-openembedded/meta-python
bitbake-layers add-layer ../meta-openembedded/meta-networking
bitbake-layers add-layer ../meta-openembedded/meta-perl


######## Perl 
git clone git://github.com/meta-perl/meta-perl.git


########  Create a full disk encryption with LUKS partition and disk unlock password bind to TPM 
git clone git://git.yoctoproject.org/meta-security.git
cd meta-security
git checkout  kirkstone
# IMAGE_INSTALL_append = " cryptsetup tpm2-tools tpm2-tss tpm2-abrmd tpm2-tss-engine"

cd build
bitbake-layers add-layer ../meta-security
echo 'IMAGE_INSTALL += " cryptsetup tpm2-tools tpm2-tss"' >> conf/local.conf 
echo 'MACHINE_FEATURES += "tpm2"' >> conf/local.conf
echo 'IMAGE_INSTALL += " tpm2-abrmd tpm2-tss-engine"' >> conf/local.conf

mkdir -p meta-custom/recipes-security/full-disk-encryption
cd meta-custom/recipes-security/full-disk-encryption

Create full-disk-encryption_1.0.bb
SUMMARY = "Full Disk Encryption with LUKS and TPM integration"
LICENSE = "MIT"
SRC_URI = "file://setup-encryption.sh"

do_install() {
    install -d ${D}${sysconfdir}/init.d
    install -m 0755 ${WORKDIR}/setup-encryption.sh ${D}${sysconfdir}/init.d/setup-encryption
}

FILES_${PN} += "${sysconfdir}/init.d/setup-encryption"


Create setup-encryption.sh:

#!/bin/sh

# Initialize LUKS
cryptsetup luksFormat /dev/sda2 --key-file /root/keyfile

# Open LUKS partition
cryptsetup open /dev/sda2 luks_root --key-file /root/keyfile

# Format the encrypted partition
mkfs.ext4 /dev/mapper/luks_root

# Mount the encrypted partition
mount /dev/mapper/luks_root /mnt

# TPM2 Integration
tpm2_createprimary -C o -c primary.ctx
tpm2_create -G aes256 -u key.pub -r key.priv -C primary.ctx -i /root/keyfile -c key.ctx
tpm2_evictcontrol -C o -c key.ctx 0x81010001

# Store Key Metadata
mkdir -p /etc/tpm2
tpm2_write -o /etc/tpm2/luks-root-key.bin -c key.ctx

#######
chmod +x setup-encryption.sh

####### Configure initramfs for LUKS and TPM
Edit your conf/local.conf to add initramfs tools and cryptsetup hooks:

IMAGE_INSTALL += " initramfs-tools"

######## Create the Hook Script:

Create /etc/initramfs-tools/hooks/unlock-tpm:

mkdir -p meta-custom/recipes-security/full-disk-encryption/files
cat << 'EOF' > meta-custom/recipes-security/full-disk-encryption/files/unlock-tpm
#!/bin/sh
PREREQ=""
prereqs() { echo "$PREREQ"; }
case $1 in
prereqs) prereqs; exit 0;;
esac

. /scripts/functions

echo "Unlocking LUKS partition using TPM..."

tpm2_unseal -c /etc/tpm2/luks-root-key.bin > /keyfile
cryptsetup open /dev/sda2 luks_root --key-file /keyfile
EOF


4. **Make the Script Executable**:

```bash
chmod +x meta-custom/recipes-security/full-disk-encryption/files/tpm-unlock


BBLAYERS += "/path/to/meta-custom"








########  SECURE BOOT
git clone git@github.com:Wind-River/meta-secure-core.git
cd meta-secure-core
git checkout  kirkstone
#
cd buid
bitbake-layers add-layer ../meta-secure-core/meta
bitbake-layers add-layer ../meta-secure-core/meta-signing-key
bitbake-layers add-layer ../meta-secure-core/meta-tpm
bitbake-layers add-layer ../meta-secure-core/meta-tpm2
bitbake-layers add-layer ../meta-secure-core/meta-efi-secure-boot
bitbake-layers add-layer ../meta-secure-core/meta-integrity
bitbake-layers add-layer ../meta-secure-core/meta-encrypted-storage
bitbake-layers add-layer ../meta-secure-core/meta-efi-secure-boot


######## SSH support local.conf
echo 'IMAGE_INSTALL += " openssh"' >> conf/local.conf


### 
>>>>>>>>
Port 22
PermitRootLogin yes
PasswordAuthentication yes
<<<<<<<<

./recipes-connectivity/openssh/openssh/sshd_config
./recipes-connectivity/openssh/openssh/ssh_config

### systemd

vi  meta/recipes-core/systemd/systemd_%.bbappend
>>>>>>>>
SYSTEMD_AUTO_ENABLE = "enable"
SYSTEMD_SERVICE_${PN} = "sshd.service"
<<<<<<<<

### sshd config
>>>>>>>>
mkdir -p meta/recipes-core/ssh/files
cat <<EOL > meta/recipes-core/ssh/files/sshd_config
Port 22
PermitRootLogin yes
PasswordAuthentication yes
EOL
<<<<<<<<

### openssh_%.bbappend 
>>>>>>>>
mkdir -p meta/recipes-core/ssh
cat <<EOL > meta/recipes-core/ssh/openssh_%.bbappend
FILESEXTRAPATHS_prepend := "\${THISDIR}/files:"
SRC_URI += "file://sshd_config"

do_install_append() {
    install -m 0644 \${WORKDIR}/sshd_config \${D}\${sysconfdir}/ssh/sshd_config
}
EOL
<<<<<<<<




expect :

#!/usr/bin/expect -f
set passphrase "your_passphrase_here"

spawn sbsign --key /home/jack/SECURE_BOOT_KEYS/PK.key --cert /home/jack/SECURE_BOOT_KEYS/PK.crt --output bzImage-qemux86-64.bin.signed bzImage-qemux86-64.bin
expect "Enter PEM pass phrase:"
send "jack\r"
interact








bitbake core-image-sato


######## LOCAL.CONF ISO + SECURE BOOT
# Configure local.conf for x86_64
echo 'MACHINE ?= "qemux86-64"' >> conf/local.conf
echo 'IMAGE_FSTYPES += "iso"' >> conf/local.conf
echo 'SECURE_BOOT_ENABLE = "1"' >> conf/local.conf
echo 'SECURE_BOOT_GENSIGN = "1"' >> conf/local.conf
# echo 'SECURE_BOOT_IMAGE_TYPES += "bios"' >> conf/local.conf
echo 'SECURE_BOOT_IMAGE_TYPES += "uefi kernel"' >> conf/local.conf
echo 'SECURE_BOOT_ENABLED = "1"' >> conf/local.conf
echo 'SECURE_BOOT_SIGN_MODE = "custom"' >> conf/local.conf
echo 'SECURE_BOOT_KEYS_DIR = "/home/jack/SECURE_BOOT_KEYS"' >> conf/local.conf
echo 'SECURE_BOOT_SIGN_KEY_DIR = "/home/jack/SECURE_BOOT_KEYS"' >> conf/local.conf
echo 'SECURE_BOOT_PK = "${SECURE_BOOT_SIGN_KEY_DIR}/PK.crt"' >> conf/local.conf
echo 'SECURE_BOOT_KEK = "${SECURE_BOOT_SIGN_KEY_DIR}/KEK.crt"' >> conf/local.conf
echo 'SECURE_BOOT_DB = "${SECURE_BOOT_SIGN_KEY_DIR}/db.crt"' >> conf/local.conf
echo 'IMAGE_INSTALL += " openssh"' >> conf/local.conf
echo 'MACHINE_FEATURES += " uefi"' >> conf/local.conf
echo 'IMAGE_FSTYPES += "uefi"' >> conf/local.conf

# Enable kernel image signing
# openssl req -new -x509 -newkey rsa:2048 -keyout PK.key -out PK.crt -days 3650 -subj "/CN=Platform Key/"
# openssl req -new -x509 -newkey rsa:2048 -keyout private-key.pem -outform PEM -out public-cert.pem -nodes -days 36500 -subj "/CN=Yocto Kernel Signing/"

echo 'KERNEL_CLASSES += "kernel-fitimage"' >> conf/local.conf

# Path to the private key
echo 'KERNEL_FIT_SIGNING_KEY = "${SECURE_BOOT_SIGN_KEY_DIR}/PK.key"' >> conf/local.conf

# Path to the public key (certificate)
echo 'KERNEL_FIT_SIGNING_CERT = "${SECURE_BOOT_SIGN_KEY_DIR}/PK.crt"' >> conf/local.conf

echo 'BBDEBUG = "yes"' >> >> conf/local.conf


###########################################################################################SECURE BOOT KENREL RECIPE 
DESCRIPTION = "Recipe to sign the kernel image for Secure Boot"

SRC_URI = "file://signing-script.sh"
S = "${WORKDIR}"

LIC_FILES_CHKSUM = "file://signing-script.sh;md5=5cbfa2805669fd483ba11b5de02ccf6b"
LICENSE = "MIT"

DEPENDS = "virtual/kernel"


inherit kernel-fitimage


do_install() {
    echo "JACKWANG: do_install() Signing the kernel image... )))))"
    install -d ${D}${bindir}
    install -m 0755 ${WORKDIR}/signing-script.sh ${D}${bindir}/signing-script.sh
}

do_sign_kernel() {
    echo "JACKWANG do_sign_kernel() Signing the kernel image... )))))"
    eleep 10
    sbsign --key ${KERNEL_FIT_SIGNING_KEY} --cert ${KERNEL_FIT_SIGNING_CERT} --output ${DEPLOY_DIR_IMAGE}/bzImage-${MACHINE}.signed ${DEPLOY_DIR_IMAGE}/bzImage-${MACHINE}.bin
}

do_custom_task[depends] += "virtual/kernel:do_compile_kernel"

addtask sign_kernel after after do_install before do_deploy

#################################################################################################################################################################################

########
bitbake -c clean your-recipe 
bitbake your-recipe






######## check kernel with Secure boot
sudo apt-get install sbsigntool
sbverify --list bzImage
openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=Kernel Signing/"
sbsign --key MOK.priv --cert MOK.der --output bzImage-qemux86-64.signed.bin bzImage-qemux86-64.bin
sbverify --list bzImage-qemux86-64.signed.bin




######## EFI download

vi meta-openembedded/meta-networking/recipes-core/images/meta-networking-image.bb
vi meta-openembedded/meta-python/recipes-core/images/meta-python-image-base.bb
vi meta/recipes-core/images/core-image-ptest-fast.bb
vi /home/jack/temp/poky/meta-secure-core/meta/recipes-core/images/secure-core-image.bb
vi /home/jack/temp/poky/meta-openembedded/meta-perl/recipes-perl/images/meta-perl-image.bb
vi /home/jack/temp/poky/meta/recipes-graphics/images/core-image-weston.bb
vi /home/jack/temp/poky/meta/recipes-extended/images/core-image-full-cmdline.bb
vi /home/jack/temp/poky/meta/recipes-sato/images/core-image-sato.bb
vi /home/jack/temp/poky/meta-openembedded/meta-oe/recipes-core/images/meta-oe-ptest-image.bb
vi /home/jack/temp/poky/meta-security/recipes-core/images/security-test-image.bb
vi /home/jack/temp/poky/meta-openembedded/meta-python/recipes-core/images/meta-python-image.bb
vi /home/jack/temp/poky/meta-secure-core/meta/recipes-core/images/secure-core-image.bb
vi /home/jack/temp/poky/meta-openembedded/meta-oe/recipes-core/images/meta-oe-image-base.bb


>>>>>>>>
inherit core-image
IMAGE_CMD_uefi () {
    # Define your UEFI image creation command here
    # This could involve copying specific files or configuring UEFI-specific settings
    cp ${DEPLOY_DIR_IMAGE}/core-image-minimal-${MACHINE}.uefi ${IMGDEPLOYDIR}/core-image-minimal-${MACHINE}.uefi
}

IMAGE_FSTYPES += "uefi"

<<<<<<<<

# Enable signing for GRUB NOT NEEDED
######## pesignMYBE NOT NEEDED

cd poky 
git clone git://git.yoctoproject.org/meta-selinux
cd meta-selinux
find . -name "*pesign*"

echo 'GRUB_SIGN = "1"' >> conf/local.conf
echo 'GRUB_SIGN_KEY = "${SECURE_BOOT_SIGN_KEY_DIR}/DB.key"' >> conf/local.conf
echo 'GRUB_SIGN_CERT = "${SECURE_BOOT_SIGN_KEY_DIR}/DB.crt"' >> conf/local.conf

# Enable signing for the kernel
echo 'KERNEL_IMAGE_BASE_NAME = "bzImage"' >> conf/local.conf
echo 'KERNEL_IMAGETYPE = "bzImage"' >> conf/local.conf
echo 'SIGNED_KERNEL_IMAGE = "${KERNEL_IMAGE_BASE_NAME}.signed"' >> conf/local.conf

echo IMAGE_INSTALL += " pesign"


######## Add sign for Kernel Image
do_sign_kernel() {
    pesign -s -i ${DEPLOY_DIR_IMAGE}/${KERNEL_IMAGE_BASE_NAME} -o ${DEPLOY_DIR_IMAGE}/${SIGNED_KERNEL_IMAGE} -c db -k ${DEPLOY_DIR_IMAGE}/DB.key -p ${DEPLOY_DIR_IMAGE}/DB.crt
}
addtask sign_kernel after do_compile before do_install


######## 
Generate your custom keys:

Platform Key (PK): This key signs the Key Exchange Key (KEK).
Key Exchange Key (KEK): This key signs the Database (DB) and Database of Revoked Signatures (DBX).
Database (DB): This key signs the bootloader and other EFI binaries.
Database of Revoked Signatures (DBX): This is used to revoke keys and binaries.



######## HOST TOOLS FRO SECURE BOOT
sudo apt install efitools
sudo apt install sbsigntool 
sudo apt install openssl


######## ON THE HOST Create Keys
openssl req -new -x509 -newkey rsa:2048 -keyout PK.key -out PK.crt -days 3650 -subj "/CN=Platform Key/"
openssl req -new -x509 -newkey rsa:2048 -keyout KEK.key -out KEK.crt -days 3650 -subj "/CN=Key Exchange Key/"
openssl req -new -x509 -newkey rsa:2048 -keyout db.key -out db.crt -days 3650 -subj "/CN=Signature Database Key/"

######## Convert the keys to EFI signature list format:
cert-to-efi-sig-list PK.crt PK.esl
cert-to-efi-sig-list KEK.crt KEK.esl
cert-to-efi-sig-list DB.crt DB.esl


######## Create authentication files (signed lists):

sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth
sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth
sign-efi-sig-list -k KEK.key -c KEK.crt db DB.esl DB.auth





# Build the image
bitbake core-image-sato

# The ISO image will be in tmp/deploy/images/qemux86-64/



### Shell environment set up for builds. ###

You can now run 'bitbake <target>'

Common targets are:
    core-image-minimal
    core-image-full-cmdline
    core-image-sato
    core-image-weston
    meta-toolchain
    meta-ide-support


######## CRETA ISO IMAGE USING WIC
# wic create mkefi --image-name core-image-minimal --bootimg-efi --kernel-efi --rootfs-dir=tmp/deploy/images/genericx86-64 --outdir=tmp/deploy/images/genericx86-64



######## create a secure leys for secure storage
##  Generates a 256-bit key (32 bytes)
openssl enc -aes-256-cbc -pass file=/etc/encryption/rootfs.key -out /home/jack/SECURE_STORAGE_KEYS/roots_keys
##  Encrypt the Root Filesystem Image
openssl enc -aes-256-cbc -pbkdf2 -in /home/jack/temp/poky/build/tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20240722172208.rootfs.ext4 -out /home/jack/SECURE_STORAGE_KEYS/rootfs.enc -pass file:/home/jack/SECURE_STORAGE_KEYS/roots_keys
### Decrypt Roots Filesystem Imagw
openssl enc -d -aes-256-cbc -pbkdf2 -pass file:/home/jack/SECURE_STORAGE_KEYS/roots_keys  -in /home/jack/SECURE_STORAGE_KEYS/rootfs.enc  -out /home/jack/SECURE_STORAGE_KEYS/rootfs.dec 
### Decrypt Rootfs from initramfs
#!/bin/sh


# Decrypt the rootfs using the provided key
openssl enc -d -aes-256-cbc -pass file:/etc/encryption/rootfs.key -in /mnt/rootfs.enc -out /mnt/rootfs

# Mount the decrypted rootfs
mount -o loop /mnt/rootfs /newroot
exec switch_root /newroot /sbin/init





## local.conf
## core-image-minimal-qemux86.ext4
IMAGE_INSTALL += " cryptsetup"
INITRAMFS_IMAGE_BUNDLE = "1"
INITRAMFS_IMAGE = "core-image-minimal-initramfs"






####### KERNEL CHANGES

find . -name "*linux*.bb"
bitbake -e linux-yocto | grep ^WORKDIR=



// DO CLEAN ONCE
bitbake -c clean linux-yocto
bitbake -c clean virtual/kernel

bitbake -c fetch linux-yocto
bitbake -c unpack linux-yocto
bitbake -c fetch virtual/kernel
bitbake -c unpack virtual/kernel


vi /home/jack/temp/poky/build/tmp/work-shared/qemux86-64/kernel-source/init/main.c

   printk(KERN_INFO "JACKWANG0: Hello from early boot!\n");

vi /home/jack/temp/poky/build/tmp/work-shared/qemux86-64/kernel-source/arch/x86/kernel/head_64.S


bitbake -c compile -f linux-yocto
bitbake -c compile -f virtual/kernel 
bitbake -c deploy linux-yocto
bitbake -c deploy virtual/kernel 

bitbake core-image-minimal 
runqemu qemux86-64



UFEI:

sudo apt install qemu-system-x86
sudo apt-get install ovmf

qemu-system-x86_64   -bios /usr/share/OVMF/OVMF_CODE.fd   -drive file=path/to/your/image.qcow2,format=qcow2   -m 512   -net nic   -net user

runqemu nographic core-image-minimal qemux86-64

Ctrl-a release and type x


